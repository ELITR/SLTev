#!/usr/bin/env python 

import os
import sys
import argparse
import requests
from os import getcwd
from urllib.request import urlopen
import subprocess as sp
import shutil
from utilities import *
import logging

# initiate the parser
parser = argparse.ArgumentParser(description="generate and evaluate slt/asr files.")
parser.add_argument("-g", help="eliter index name for download files ", const=False, default=False, nargs='?', type=str)
# parser.add_argument("-o", help="path of the output dir (default is ./ )", default = "./", type=str)
parser.add_argument("--audio", help="if exist just audios saved ", const=True, default=False, nargs='?')
parser.add_argument("--ASRev", help="if exist ASRev running ", const=True, default=False, nargs='?')
parser.add_argument("--noaudio",  help="if exist just download text files", const=True, default=False, nargs='?')
parser.add_argument("--clean", "-clean", help="if exist clean all files in the ./SLTev-cache/", const=True, default=False, nargs='?')
parser.add_argument("-e", help="eliter index name for evaluate files ", const=False, default=False, nargs='?', type=str)
parser.add_argument("--outdir", help="slt output results directory (output of the SLTev) ", default= "./outdir/", type=str)
parser.add_argument("--offline", "-offline", help="if exist just using cache folder ", const=True, default=False, nargs='?')
parser.add_argument("-outfile", help="if exist,standard evaluate output saved in a file.", default=False, nargs='?', type=str)
parser.add_argument("-i", help="eliter file name or dir", type=str)
parser.add_argument("-alignment", help="path of the alignment file", type=list, nargs='+' )
parser.add_argument("-t", help="length times for the bleu  calculation per time ", default = 3000, type=int)
parser.add_argument("--commitid", help="commitid for eliter-testset repo) ", default= "HEAD", type=str)
# read arguments from the command line
args = parser.parse_args()

# initialize the log settings

#------- make a temp directory 


#-------actine mwerSegmenter
cmd = "chmod +x mwerSegmenter"
os.system(cmd)

cache_path = "./SLTev-cache/"
ostt_other_path = "./SLTev-cache/OStt-tt-files/"

if args.clean == True:
    try:
        shutil.rmtree(cache_path)
        print("all files and folders in ./SLTev-cache/ removed")
        sys.exit(1)
    except:
        print("Folder ./SLTev-cache/  is not exist")
        sys.exit(1)

if os.path.isdir(ostt_other_path):
    pass
else:
    cmd = "mkdir -p " + ostt_other_path
    os.system(cmd)


#----------------get commit id
try:
    url = "https://github.com/ELITR/elitr-testset"
    cmd =  "git ls-remote " + url + " HEAD"
    commit_id = sp.getoutput(cmd).split('\t')[0]
except:
    commit_id = "no commit id, you are using offline mode"
original_stdout = sys.stdout
 


if args.g != False:
    #if elitr-testset repo exist pull it and otherwise clone it
    git_path = "https://github.com/ELITR/elitr-testset.git"
    if os.path.isdir('./elitr-testset'):
        cmd = "cd ./elitr-testset"
        runCMD(cmd)
        cmd = "git pull"
        runCMD(cmd)
        cmd = "cd .."
        runCMD(cmd)
    else:
        cmd = "git clone " + git_path
        runCMD(cmd)
        #-------checkout 
        cmd = "git checkout " + args.commitid
        runCMD(cmd)
        cmd = "cd .."
        runCMD(cmd)

    gitLock() # lock the repo
    indice_file_path = "./elitr-testset/indices/" + args.g
    target_path = ostt_other_path + args.g
    # check target existence
    cmd = " mkdir " + target_path
    runCMD(cmd)
    populate(indice_file_path, target_path)
    gitUnLock() #unlock the repo    
    sys.exit(1)
#------------------download giza-outs

    
align_root_path = "./SLTev-cache/OStt-tt-files/"  + args.e + '/'
ostt_root_path = "./SLTev-cache/OStt-tt-files/" + args.e + '/'
tt_root_path = "./SLTev-cache/OStt-tt-files/" + args.e + '/'

align_dict = makeAlignIndexing(align_root_path)
ostt_list = makeosttIndexing(ostt_root_path)
ost_list = makeostIndexing(ostt_root_path)
tt_dict = makettIndexing(tt_root_path)
input_status = 'file'
if os.path.isdir(args.i):
    input_status = 'dir'

    
#-------------check input file/files format
if input_status == 'file':
    state = check_input(args.i)
    if state == 1:
        sys.exit(1)
else:
    slt_files = getSLT(args.i)
    for slt_file in slt_files:
        state = check_input(slt_file)
        if state == 1:
            sys.exit(1)
    
    
# #----------------------------run ASRev
if  args.e != False and input_status == 'file' and args.ASRev == True: 
    name, language, asr_status  = getNameLanguageStatus(args.i)
    #------check the input file

    if os.path.isfile(args.i):
        pass
    else:
        print(args.i, " is not exist.")
        sys.exit(1)
    if asr_status != 'asr':
        text = args.i + " is not a asr file."
        print(text)
        sys.exit(1)
   
    ost_file = getost(name, ost_list)
    text = "Evaluating the file " +  args.i + " in terms of  WER score against " + ' '.join(ost_file)
    print(text)
    
    cmd = "./ASRev --ost " + ' '.join(ost_file) + ' --asr ' + args.i
    os.system(cmd)
    sys.exit(1)

elif args.e != False and input_status == 'dir' and args.ASRev == True:     
    
    slt_files = getSLT(args.i)
    for slt_file in slt_files: 
        name, language, asr_status  = getNameLanguageStatus(slt_file)
        if asr_status != 'asr':
            text =  slt_file + " is not a asr file."
            print(text)
            continue
            
        ost_file = getost(name, ost_list)    
        text = "Evaluating the file " +  slt_file + " in terms of  WER score against " + ' '.join(ost_file)
        print(text)
        
        out_name = args.outdir + name + '.' + language + '.ASRev.asr.out'
        with open(out_name, 'w') as f:
            sys.stdout = f
            print("commit id is ", commit_id)
            sys.stdout = original_stdout
        cmd = "./ASRev --ost " + ' '.join(ost_file) + ' --asr ' + slt_file + " >> " + out_name
        os.system(cmd)
    sys.exit(1)    
        

#--------------- evaluate per all cache files    
if  args.e != False and input_status == 'file': 
    name, language, asr_status  = getNameLanguageStatus(args.i)
    #------check the input file
    if os.path.isfile(args.i):
        pass
    else:
        print(args.i, " is not exist.")
        sys.exit(1)

    #---------- get OStt files
    ostt_file = getostt(name, ostt_list) 
    ost_file = getost(name, ost_list)
    #-----------check OStt and tt files (for exist)
    if len(ostt_file) == 0:
        print("commit id is ", commit_id)
        print("OStt file does not exist.")
        sys.exit(1)
    if  asr_status != 'asr': 
        tt_file = gettt(name, language, tt_dict)
        if len(tt_file) == 0:
            print("commit id is ", commit_id)
            print("tt file does not exist.")
            sys.exit(1)
    #------- get align file
    align_file = None
    if asr_status != 'asr':
        if args.alignment == None:
            a_name = [k.split('/')[-1] for k in tt_file]
            align_file = getAlign(a_name, language, align_dict)
            if align_file == None:
                print("The alignment is not exist for ", args.i, ", you can use -alignment for manual alignment" )
                sys.exit(1)
        else:
            align_file = []
            for i in args.alignment:
                align_file.append(''.join(i))
    #--------evaluation
    if asr_status != 'asr':
        text = "Evaluating the file " +  args.i + " in terms of translation quality against " + ' '.join(tt_file)
    else:
        text = "Evaluating the file " +  args.i + " in terms of translation quality against " + ' '.join(ost_file)
    print(text)
    if asr_status == 'asr':
       
        if args.outfile == False:
            print("commit id is ", commit_id) 
            cmd = "python evaluator.py --ostt " + ' '.join(ostt_file) + " --tt " + ' '.join(ost_file) + " --mt " + args.i + " --asr True " + " --b_time " + str(args.t)
            os.system(cmd)
        else:
            with open(args.outfile, 'w') as f:
                sys.stdout = f
                print("commit id is ", commit_id)
                sys.stdout = original_stdout
            cmd = "python evaluator.py --ostt " + ' '.join(ostt_file) + " --tt " + ' '.join(ost_file) + " --mt " + args.i + " --asr True " + " --b_time " + str(args.t) + " >> " + args.outfile
            os.system(cmd)
            
            
    else:
        if len(tt_file) != len(align_file):
            print("count of tt files and align files not equel.")
            sys.exit(1)
        if args.outfile == False:
            print("commit id is ", commit_id)
            cmd = "python evaluator.py --ostt " + ' '.join(ostt_file) + " --tt " + ' '.join(tt_file) + " --mt " + args.i + " --align " + ' '.join(align_file) + " --b_time " + str(args.t)
            os.system(cmd)
        else:
            with open(args.outfile, 'w') as f:
                sys.stdout = f
                print("commit id is ", commit_id)
                sys.stdout = original_stdout
            cmd = "python evaluator.py --ostt " + ' '.join(ostt_file) + " --tt " + ' '.join(tt_file) + " --mt " + args.i + " --align " + ' '.join(align_file) + " --b_time " + str(args.t) + " >> " + args.outfile
            os.system(cmd)
    
    
elif args.e != False and input_status == 'dir':
    #------check input
    if os.path.isdir(args.outdir):
        pass
    else:
        print(args.outdir, " is not exist, we will create it. ")
        cmd = "mkdir -p " + args.outdir
        os.system(cmd)
    
    slt_files = getSLT(args.i)
    for slt_file in slt_files:
        name, language, asr_status  = getNameLanguageStatus(slt_file)
        #------check the input file
        if os.path.isfile(slt_file):
            pass
        else:
            print(slt_file, " is not exist.")
            sys.exit(1)

        #---------- get OStt file
  
        ostt_file = getostt(name, ostt_list)
        ost_file = getost(name, ost_list)
        

        #------------check OStt and tt files (check for existing)
        if asr_status != 'asr':
            out_name = args.outdir + name + '.' + language + '.slt.out'
        else:
            out_name = args.outdir + name +'.'+ language +'.asr.out'
        
        if len(ostt_file) == 0:
            with open(out_name, 'w') as f:
                sys.stdout = f
                print("commit id is ", commit_id)
                print("OStt file does not exist.")
                sys.stdout = original_stdout
                continue
        if asr_status != 'asr':       
            tt_file = gettt(name, language, tt_dict)
            if len(tt_file) == 0:
                with open(out_name, 'w') as f:
                    sys.stdout = f
                    print("commit id is ", commit_id)
                    print("tt file does not exist.")
                    sys.stdout = original_stdout
                    continue
                    
        if asr_status != 'asr': 
            text = "Evaluating the file " + slt_file + " in terms of translation quality against " + ' '.join(tt_file)
        else:
            text = "Evaluating the file " + slt_file + " in terms of translation quality against " + ' '.join(ost_file)
        print(text)
        #------- get align file
        align_file = None
        if asr_status != 'asr':
            if args.alignment == None:
                a_name = [k.split('/')[-1] for k in tt_file]
                align_file = getAlign(a_name, language, align_dict)
                if align_file == None:
                    print("The alignment is not exist for ", args.f, ", you can use -alignment for manual alignment" )
                    sys.exit(1)
            else:
                align_file = []
                for i in args.alignment:
                    align_file.append(''.join(i)) 
                    
        if asr_status == 'asr':
            out_name = args.outdir + name +'.'+ language +'.asr.out'
            with open(out_name, 'w') as f:
                sys.stdout = f
                print("commit id is ", commit_id)
                sys.stdout = original_stdout
            if len(ostt_file) != 0 and len(ost_file) != 0:         
                cmd = "python evaluator.py --ostt " + ' '.join(ostt_file) + " --tt " + ' '.join(ost_file) + " --mt " + slt_file + " --asr True " + " --b_time " + str(args.t) + " >> " + out_name
                os.system(cmd)     
        else:
            if len(tt_file) != len(align_file):
                print("count of tt files and align files not equel.")
                sys.exit(1)
            out_name = args.outdir + name + '.' + language + '.slt.out'
            with open(out_name, 'w') as f:
                sys.stdout = f
                print("commit id is ", commit_id)
                sys.stdout = original_stdout
            if len(ostt_file) != 0 and len(tt_file) != 0:
                cmd = "python evaluator.py --ostt " + ' '.join(ostt_file) + " --tt " + ' '.join(tt_file) + " --mt " + slt_file + " --align " + ' '.join(align_file) + " --b_time " + str(args.t) + " >> " + out_name
                os.system(cmd)

